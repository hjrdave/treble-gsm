# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
# https://www.aaron-powell.com/posts/2019-02-18-releasing-to-npm-from-azure-devops/

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- bash: 
        # get package name from package.json file
        packageName=$(jq -r ".name" package.json)
        
        # define new package version based on
        var=$BUILD_NUMBER
        package_version=${var::-3}

        # REST API URL to get package id from npm feed
        get_package_id_URL="https://feeds.dev.azure.com/{ORGANIZATION NAME}/_apis/packaging/Feeds/{FEED GUID}/packages?protocolType=Npm&packageNameQuery=$packageName&api-version=5.0-preview.1"

        # get package id based on package name. if query below returns more than one package id, as some packages might have similar names, we'll take the first returned id
        package_ids=$(curl -X GET -u PATUSER:$SYSTEM_ACCESSTOKEN $get_package_id_URL | jq -r '.value[].id')
        package_arr=($package_ids)
        package_id=${package_arr[0]}

        # REST API URL to get all available versions of the package
        all_versions_URL="https://feeds.dev.azure.com/{ORGANIZATION NAME}/_apis/packaging/Feeds/{FEED GUID}/packages/$package_id/versions?api-version=5.0-preview.1"

        # next, let's get all available versions for our package
        all_versions=$(curl -X GET -u PATUSER:$SYSTEM_ACCESSTOKEN $all_versions_URL | jq -r '.value[].version')
        all=($all_versions)

        # if we find out that the version we're trying to publish already exists in the feed, then let's increment patch version for that package and publish
        if [[ " ${all[@]} " =~ " ${package_version} " ]]; then

        # get latest version currently published in the feed for our package
        latest_version=$(curl -X GET -u PATUSER:$SYSTEM_ACCESSTOKEN $get_package_id_URL| jq -r '.value[].versions[].version')
        IFS=. read i1 i2 i3 <<< "$latest_version"
        i3_updated=$((i3 + 1))
        new_version=$i1.$i2.$i3_updated
        new_buildnumber=$i1.$i2.$i3_updated.01

        # update patch number variable
        echo "##vso[task.setvariable variable=patch;]$i3_updated"

        # update build number of the current build. let's keep things tidy
        echo "##vso[build.updatebuildnumber]$new_buildnumber"
  
        env:
        BUILD_NUMBER: $(Build.BuildNumber)
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        displayName: 'get package version'

- task: Npm@1
    displayName: 'npm version'
    inputs:
    command: 'custom'
    workingDir: $(Build.SourcesDirectory)
    verbose: false
    customCommand: 'version $major.$minor.$path --no-git-tag-version --allow-same-version'
    customRegistry: 'useFeed'
    customFeed: {FEED GUID}

- script: |
    npm pack
  displayName: 'Package for npm release'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '*.tgz'
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy npm package'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: 'package.json'
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy package.json'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: 'README.md'
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy README.md'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: 'LICENSE'
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy LICENSE'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/npm'
    artifactName: npm
  displayName: 'Publish npm artifact'
